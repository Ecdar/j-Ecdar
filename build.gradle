plugins {
    id 'java'
    id 'application'
    id 'java-library'
    id 'com.google.protobuf' version '0.8.17'
    id 'antlr'
    id 'org.graalvm.buildtools.native' version '0.9.14'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

java{
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

mainClassName = "JECDAR"

dependencies {
    testImplementation "junit:junit:4.12"
    implementation 'io.grpc:grpc-netty-shaded:1.42.0'
    implementation 'io.grpc:grpc-protobuf:1.42.0'
    implementation 'io.grpc:grpc-stub:1.42.0'
    implementation 'com.google.cloud:native-image-support:0.14.1'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+
    implementation 'commons-cli:commons-cli:1.4'
    implementation 'org.jdom:jdom2:2.0.6'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
    antlr "org.antlr:antlr4:4.10.1"
    implementation 'org.antlr:antlr4-runtime:4.10.1'
    implementation files('lib/jcdd.jar')
}

graalvmNative {
    binaries {
        main {
            imageName = 'j-Ecdar-native'
            mainClass = 'connection.Main'
            useFatJar = true
            sharedLibrary = false
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.17.3"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.42.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

generateGrammarSource {
    maxHeapSize = "128m"
    arguments += ["-visitor", "-no-listener"]
}

sourceSets {
    main {
        java {
            srcDirs = ['src', 'build/generated', 'build/generated-src/antlr/main']
        }
        proto{
            srcDirs = ['src/proto']
        }
        antlr{
            srcDirs = ['src/antlr']
        }
    }

    test {
        java {
            srcDirs = ['test']
        }
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes(
                'Main-Class': 'connection.Main',
        )
    }
    classifier = 'fat'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task submodulesUpdate(type:Exec) {
    description 'Updates (and inits) git submodules'
    commandLine 'git', 'submodule', 'update', '--init', '--recursive'
    group 'Build Setup'
}

task unpack_without_dll(type:Copy, dependsOn: 'distZip') {
    def zipFile = file("$buildDir/distributions/j-Ecdar.zip")
    def outputDir = file("$buildDir/distributions/unpacked")
    delete(outputDir)
    from { zipTree(zipFile) }
    into outputDir
    group 'distribution'
}

task unpack_with_dll(type:Copy, dependsOn: 'unpack_without_dll') {
    def dll = file("lib/JCDD.dll")
    def outputDir = file("$buildDir/distributions/unpacked/j-Ecdar/bin")
    from dll
    into outputDir
    group 'distribution'
}