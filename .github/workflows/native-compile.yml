name: Generate Native Executables

on:
  workflow_dispatch:
  workflow_call:
  
jobs:
  native-compile:
    name: Generate native executable for - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 90
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2019]
        graalvm-version: ['22.3.0']
        java-version: ['11']
        include:
          - os: ubuntu-latest
            executable-suffix: ''
            native-build-args: --verbose -J-Xmx10g
          - os: windows-2019
            executable-suffix: '.exe'
            native-build-args: --verbose -J-Xmx10g
    steps:
      # Recursively checkout all dependencies
      - name: Checkout project sources
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Prepare for JCDD download
        run: mkdir -p "${{ github.workspace }}/lib"

      - if: runner.os == 'Windows'
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          branch: main
          name: jcdd-windows
          path: ${{ github.workspace }}/lib

      - if: runner.os != 'Windows'
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          workflow_conclusion: success
          branch: main
          name: jcdd-linux
          path: ${{ github.workspace }}/lib

      - uses: actions/checkout@v3
      - id: executable
        run: echo "::set-output name=name::j-Ecdar_${{ github.event.release.tag_name || 'snapshot' }}_${{ runner.os }}-x86_64"

      - name: Permission check
        run: ls -Ral ${{ github.workspace }}
      
      - name: Set up GraalVM (Java ${{ matrix.java-version }})
        uses: graalvm/setup-graalvm@v1
        with:
          version: '${{ matrix.graalvm-version }}'
          java-version: '${{ matrix.java-version }}'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build ${{ steps.executable.outputs.name }}
        run: ./gradlew nativeCompile
        
      - name: Archive binary
        if: ${{ !github.event.act }} # Skip if this is a local test run
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.executable.outputs.name }}
          path: target/${{ steps.executable.outputs.name }}${{ matrix.executable-suffix }}
